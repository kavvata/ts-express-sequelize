import { Model, DataTypes } from "sequelize";
import { sequelize } from "main/database/connections/db";

// üîπ Criamos a classe `Aluno`, que estende `Model`.
// Essa classe serve apenas para definir a estrutura dos dados que essa entidade ter√° no TypeScript.
// Ou seja, define a tipagem dos atributos, mas ainda n√£o os conecta ao Sequelize.
export class Aluno extends Model {
  public id!: number;
  public nome!: string;
  public email!: string;
  public matricula!: string;
}

// üîπ Aqui √© onde realmente informamos ao Sequelize como a tabela "alunos" deve ser criada no banco de dados.
// 1Ô∏è‚É£ O primeiro parametro define os atributos da tabela e suas regras (tipos, se s√£o √∫nicos, se podem ser nulos, etc.).
// 2Ô∏è‚É£ O segundo parametro configura√ß√µes gerais da tabela, como nome e timestamps.
Aluno.init(
  {
    // üîπ Defini√ß√£o dos atributos da tabela no banco de dados
    id: {
      type: DataTypes.INTEGER, // Define como um n√∫mero inteiro
      primaryKey: true, // Define como chave prim√°ria
      autoIncrement: true, // Faz o ID ser gerado automaticamente pelo banco
    },
    nome: {
      type: DataTypes.STRING, // Define como string (VARCHAR no banco)
      allowNull: false, // O nome n√£o pode ser nulo
    },
    email: {
      type: DataTypes.STRING,
      unique: true, // O email deve ser √∫nico
      allowNull: false,
    },
    matricula: {
      type: DataTypes.STRING,
      unique: true, // A matr√≠cula tamb√©m deve ser √∫nica
      allowNull: false,
    },
  },
  {
    sequelize, // üîπ Aqui passamos a inst√¢ncia do Sequelize, conectando essa model ao banco
    tableName: "alunos", // Define o nome da tabela no banco de dados
    timestamps: false, // Como n√£o queremos colunas de "createdAt" e "updatedAt", desativamos timestamps
  },
);
